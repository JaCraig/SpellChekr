{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Spellchekr API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Spellchekr API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions Service collection extensions"
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Spellchekr API Reference",
    "keywords": "Class ServiceCollectionExtensions Service collection extensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SpellChekr.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddSpellChecker(IServiceCollection?) Adds the spell checker. Declaration public static IServiceCollection? AddSpellChecker(this IServiceCollection? serviceDescriptors) Parameters Type Name Description IServiceCollection serviceDescriptors The service descriptors. Returns Type Description IServiceCollection The service collection | Improve this Doc View Source RegisterSpellChecker(ICanisterConfiguration?) Registers the spell checker. Declaration public static ICanisterConfiguration? RegisterSpellChecker(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper."
  },
  "api/Spellchekr.BaseClasses.html": {
    "href": "api/Spellchekr.BaseClasses.html",
    "title": "Namespace Spellchekr.BaseClasses | Spellchekr API Reference",
    "keywords": "Namespace Spellchekr.BaseClasses Classes SpellingDictionaryBase Spelling dictionary base"
  },
  "api/Spellchekr.BaseClasses.SpellingDictionaryBase.html": {
    "href": "api/Spellchekr.BaseClasses.SpellingDictionaryBase.html",
    "title": "Class SpellingDictionaryBase | Spellchekr API Reference",
    "keywords": "Class SpellingDictionaryBase Spelling dictionary base Inheritance object SpellingDictionaryBase Implements ISpellingDictionary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Spellchekr.BaseClasses Assembly: SpellChekr.dll Syntax public abstract class SpellingDictionaryBase : ISpellingDictionary Constructors | Improve this Doc View Source SpellingDictionaryBase(string, ObjectPool<StringBuilder>) Initializes a new instance of the SpellingDictionaryBase class. Declaration protected SpellingDictionaryBase(string words, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description string words The words. ObjectPool<StringBuilder> objectPool The object pool. See Also ISpellingDictionary | Improve this Doc View Source SpellingDictionaryBase(string[], ObjectPool<StringBuilder>) Initializes a new instance of the SpellingDictionaryBase class. Declaration protected SpellingDictionaryBase(string[] words, ObjectPool<StringBuilder> objectPool) Parameters Type Name Description string[] words The words. ObjectPool<StringBuilder> objectPool The object pool. See Also ISpellingDictionary Properties | Improve this Doc View Source Dictionary The dictionary Declaration protected Bag<string> Dictionary { get; } Property Value Type Description Bag<string> The dictionary. See Also ISpellingDictionary | Improve this Doc View Source Name Gets the name. Declaration public abstract string Name { get; } Property Value Type Description string The name. See Also ISpellingDictionary | Improve this Doc View Source ObjectPool Gets the object pool. Declaration protected ObjectPool<StringBuilder> ObjectPool { get; } Property Value Type Description ObjectPool<StringBuilder> The object pool. See Also ISpellingDictionary | Improve this Doc View Source WordRegex Gets the word regex. Declaration protected static Regex WordRegex { get; } Property Value Type Description Regex The word regex. See Also ISpellingDictionary Methods | Improve this Doc View Source Correct(string?) Corrects the specified word. Declaration public string? Correct(string? words) Parameters Type Name Description string words The word. Returns Type Description string The corrected word. See Also ISpellingDictionary Implements ISpellingDictionary See Also ISpellingDictionary"
  },
  "api/Spellchekr.html": {
    "href": "api/Spellchekr.html",
    "title": "Namespace Spellchekr | Spellchekr API Reference",
    "keywords": "Namespace Spellchekr Classes SpellChecker Spell checker main class"
  },
  "api/Spellchekr.Interfaces.html": {
    "href": "api/Spellchekr.Interfaces.html",
    "title": "Namespace Spellchekr.Interfaces | Spellchekr API Reference",
    "keywords": "Namespace Spellchekr.Interfaces Interfaces ISpellingDictionary Spelling dictionary interface"
  },
  "api/Spellchekr.Interfaces.ISpellingDictionary.html": {
    "href": "api/Spellchekr.Interfaces.ISpellingDictionary.html",
    "title": "Interface ISpellingDictionary | Spellchekr API Reference",
    "keywords": "Interface ISpellingDictionary Spelling dictionary interface Namespace: Spellchekr.Interfaces Assembly: SpellChekr.dll Syntax public interface ISpellingDictionary Properties | Improve this Doc View Source Name Gets the name. Declaration string Name { get; } Property Value Type Description string The name. Methods | Improve this Doc View Source Correct(string?) Corrects the specified words. Declaration string? Correct(string? words) Parameters Type Name Description string words The words. Returns Type Description string The corrected words."
  },
  "api/Spellchekr.Modules.CanisterModule.html": {
    "href": "api/Spellchekr.Modules.CanisterModule.html",
    "title": "Class CanisterModule | Spellchekr API Reference",
    "keywords": "Class CanisterModule Canister module Inheritance object CanisterModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Spellchekr.Modules Assembly: SpellChekr.dll Syntax public class CanisterModule : IModule Properties | Improve this Doc View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule See Also IModule"
  },
  "api/Spellchekr.Modules.html": {
    "href": "api/Spellchekr.Modules.html",
    "title": "Namespace Spellchekr.Modules | Spellchekr API Reference",
    "keywords": "Namespace Spellchekr.Modules Classes CanisterModule Canister module"
  },
  "api/Spellchekr.SpellChecker.html": {
    "href": "api/Spellchekr.SpellChecker.html",
    "title": "Class SpellChecker | Spellchekr API Reference",
    "keywords": "Class SpellChecker Spell checker main class Inheritance object SpellChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Spellchekr Assembly: SpellChekr.dll Syntax public class SpellChecker Constructors | Improve this Doc View Source SpellChecker(IEnumerable<ISpellingDictionary>) Initializes a new instance of the SpellChecker class. Declaration public SpellChecker(IEnumerable<ISpellingDictionary> dictionaries) Parameters Type Name Description IEnumerable<ISpellingDictionary> dictionaries The dictionaries. Methods | Improve this Doc View Source GetDictionary(string) Gets the dictionary specified. Declaration public ISpellingDictionary? GetDictionary(string name) Parameters Type Name Description string name The name of the dictionary. Returns Type Description ISpellingDictionary The dictionary specified."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Spellchekr API Reference",
    "keywords": "Code using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.ObjectPool; using Spellchekr.BaseClasses; using System.Text; namespace Spellchekr.Example { /// <summary> /// Country spell checker /// </summary> /// <seealso cref=\"SpellingDictionaryBase\"/> public class CountrySpellChecker : SpellingDictionaryBase { /// <summary> /// Initializes a new instance of the <see cref=\"CountrySpellChecker\"/> class. /// </summary> public CountrySpellChecker(ObjectPool<StringBuilder> objectPool) : base(Countries, objectPool) { } /// <summary> /// The words /// </summary> private static readonly string[] Countries = new string[] { \"Afghanistan\", \"Ã…land Islands\", \"Albania\", \"Algeria\", \"American Samoa\", \"Andorra\", \"Angola\", \"Anguilla\", \"Antarctica\", \"Antigua & Barbuda\", \"Argentina\", \"Armenia\", \"Aruba\", \"Ascension Island\", \"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\", \"Belize\", \"Benin\", \"Bermuda\", \"Bhutan\", \"Bolivia\", \"Bosnia & Herzegovina\", \"Botswana\", \"Brazil\", \"British Indian Ocean Territory\", \"British Virgin Islands\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\", \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Canary Islands\", \"Cape Verde\", \"Caribbean Netherlands\", \"Cayman Islands\", \"Central African Republic\", \"Ceuta & Melilla\", \"Chad\", \"Chile\", \"China\", \"Christmas Island\", \"Cocos (Keeling) Islands\", \"Colombia\", \"Comoros\", \"Congo - Brazzaville\", \"Congo - Kinshasa\", \"Cook Islands\", \"Costa Rica\", \"CÃ´te dâ€™Ivoire\", \"Croatia\", \"Cuba\", \"CuraÃ§ao\", \"Cyprus\", \"Czechia\", \"Denmark\", \"Diego Garcia\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Eurozone\", \"Falkland Islands\", \"Faroe Islands\", \"Fiji\", \"Finland\", \"France\", \"French Guiana\", \"French Polynesia\", \"French Southern Territories\", \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Gibraltar\", \"Greece\", \"Greenland\", \"Grenada\", \"Guadeloupe\", \"Guam\", \"Guatemala\", \"Guernsey\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\", \"Honduras\", \"Hong Kong SAR China\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Isle of Man\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jersey\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Kosovo\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Latvia\", \"Lebanon\", \"Lesotho\", \"Liberia\", \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macau SAR China\", \"Macedonia\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Martinique\", \"Mauritania\", \"Mauritius\", \"Mayotte\", \"Mexico\", \"Micronesia\", \"Moldova\", \"Monaco\", \"Mongolia\", \"Montenegro\", \"Montserrat\", \"Morocco\", \"Mozambique\", \"Myanmar (Burma)\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"New Caledonia\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\", \"Niue\", \"Norfolk Island\", \"North Korea\", \"Northern Mariana Islands\", \"Norway\", \"Oman\", \"Pakistan\", \"Palau\", \"Palestinian Territories\", \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Pitcairn Islands\", \"Poland\", \"Portugal\", \"Puerto Rico\", \"Qatar\", \"RÃ©union\", \"Romania\", \"Russia\", \"Rwanda\", \"Samoa\", \"San Marino\", \"SÃ£o TomÃ© & PrÃ­ncipe\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Sint Maarten\", \"Slovakia\", \"Slovenia\", \"Solomon Islands\", \"Somalia\", \"South Africa\", \"South Georgia & South Sandwich Islands\", \"South Korea\", \"South Sudan\", \"Spain\", \"Sri Lanka\", \"St. BarthÃ©lemy\", \"St. Helena\", \"St. Kitts & Nevis\", \"St. Lucia\", \"St. Martin\", \"St. Pierre & Miquelon\", \"St. Vincent & Grenadines\", \"Sudan\", \"Suriname\", \"Svalbard & Jan Mayen\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syria\", \"Taiwan\", \"Tajikistan\", \"Tanzania\", \"Thailand\", \"Timor-Leste\", \"Togo\", \"Tokelau\", \"Tonga\", \"Trinidad & Tobago\", \"Tristan da Cunha\", \"Tunisia\", \"Turkey\", \"Turkmenistan\", \"Turks & Caicos Islands\", \"Tuvalu\", \"U.S. Outlying Islands\", \"U.S. Virgin Islands\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United Nations\", \"United States of America\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\", \"Vatican City\", \"Venezuela\", \"Vietnam\", \"Wallis & Futuna\", \"Western Sahara\", \"Yemen\", \"Zambia\", \"Zimbabwe\", \"AF\", \"AX\", \"AL\", \"DZ\", \"AS\", \"AD\", \"AO\", \"AI\", \"AQ\", \"AG\", \"AR\", \"AM\", \"AW\", \"AC\", \"AU\", \"AT\", \"AZ\", \"BS\", \"BH\", \"BD\", \"BB\", \"BY\", \"BE\", \"BZ\", \"BJ\", \"BM\", \"BT\", \"BO\", \"BA\", \"BW\", \"BR\", \"IO\", \"VG\", \"BN\", \"BG\", \"BF\", \"BI\", \"KH\", \"CM\", \"CA\", \"IC\", \"CV\", \"BQ\", \"KY\", \"CF\", \"EA\", \"TD\", \"CL\", \"CN\", \"CX\", \"CC\", \"CO\", \"KM\", \"CG\", \"CD\", \"CK\", \"CR\", \"CI\", \"HR\", \"CU\", \"CW\", \"CY\", \"CZ\", \"DK\", \"DG\", \"DJ\", \"DM\", \"DO\", \"EC\", \"EG\", \"SV\", \"GQ\", \"ER\", \"EE\", \"ET\", \"EZ\", \"FK\", \"FO\", \"FJ\", \"FI\", \"FR\", \"GF\", \"PF\", \"TF\", \"GA\", \"GM\", \"GE\", \"DE\", \"GH\", \"GI\", \"GR\", \"GL\", \"GD\", \"GP\", \"GU\", \"GT\", \"GG\", \"GN\", \"GW\", \"GY\", \"HT\", \"HN\", \"HK\", \"HU\", \"IS\", \"IN\", \"ID\", \"IR\", \"IQ\", \"IE\", \"IM\", \"IL\", \"IT\", \"JM\", \"JP\", \"JE\", \"JO\", \"KZ\", \"KE\", \"KI\", \"XK\", \"KW\", \"KG\", \"LA\", \"LV\", \"LB\", \"LS\", \"LR\", \"LY\", \"LI\", \"LT\", \"LU\", \"MO\", \"MK\", \"MG\", \"MW\", \"MY\", \"MV\", \"ML\", \"MT\", \"MH\", \"MQ\", \"MR\", \"MU\", \"YT\", \"MX\", \"FM\", \"MD\", \"MC\", \"MN\", \"ME\", \"MS\", \"MA\", \"MZ\", \"MM\", \"NA\", \"NR\", \"NP\", \"NL\", \"NC\", \"NZ\", \"NI\", \"NE\", \"NG\", \"NU\", \"NF\", \"KP\", \"MP\", \"NO\", \"OM\", \"PK\", \"PW\", \"PS\", \"PA\", \"PG\", \"PY\", \"PE\", \"PH\", \"PN\", \"PL\", \"PT\", \"PR\", \"QA\", \"RE\", \"RO\", \"RU\", \"RW\", \"WS\", \"SM\", \"ST\", \"SA\", \"SN\", \"RS\", \"SC\", \"SL\", \"SG\", \"SX\", \"SK\", \"SI\", \"SB\", \"SO\", \"ZA\", \"GS\", \"KR\", \"SS\", \"ES\", \"LK\", \"BL\", \"SH\", \"KN\", \"LC\", \"MF\", \"PM\", \"VC\", \"SD\", \"SR\", \"SJ\", \"SZ\", \"SE\", \"CH\", \"SY\", \"TW\", \"TJ\", \"TZ\", \"TH\", \"TL\", \"TG\", \"TK\", \"TO\", \"TT\", \"TA\", \"TN\", \"TR\", \"TM\", \"TC\", \"TV\", \"UM\", \"VI\", \"UG\", \"UA\", \"AE\", \"GB\", \"UN\", \"US\", \"UY\", \"UZ\", \"VU\", \"VA\", \"VE\", \"VN\", \"WF\", \"EH\", \"YE\", \"ZM\", \"ZW\", }; /// <summary> /// Gets the name. /// </summary> /// <value> /// The name. /// </value> public override string Name => \"Country\"; } /// <summary> /// An example program that shows how to use the spell checker. /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Create a new service collection. var Services = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Get the spell checker service. var SpellChecker = Services?.GetService<SpellChecker>(); if (SpellChecker is null) return; // Send the word to the spell checker to get the corrected value. var Output = SpellChecker.GetDictionary(\"Country\")?.Correct(\"Fraaance\"); // Let's output the corrected value. Console.WriteLine(Output); } } } Output France"
  },
  "index.html": {
    "href": "index.html",
    "title": "SpellChekr | Spellchekr API Reference",
    "keywords": "SpellChekr Basic spell checker. The system is based on Peter Norvig's spelling suggestion system. Usage In order to use it you need to declare a dictionary: public class ExampleSpellChecker : SpellingDictionaryBase { public ExampleSpellChecker(ObjectPool<StringBuilder> objectPool) : base(Words, objectPool) { } public override string Name => \"Example\"; private static readonly string[] Words = new string[] { \"Word1\", \"Word2\" ... \"Word9999999\" } } And then set it up on the service collection along with the SpellChecker class: ServiceCollection.AddCanisterModules(); From there you just use the SpellChecker class: string Output=SpellChecker.GetDictionary(\"Example\").Correct(input); The GetDictionary method takes in the name of the dictionary that you wish to use and Correct takes the words that you wish to check."
  }
}